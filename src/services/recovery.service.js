import crypto from 'node:crypto';import UserRepo from '../repository/UserRepository.js';import {sendResetEmail} from '../utils/mail.service.js';import {hash,compare} from '../utils/bcrypt.js'
export async function requestReset(email,baseUrl){const user=await UserRepo.getByEmail(email);if(!user)return;const token=crypto.randomBytes(20).toString('hex');const exp=new Date(Date.now()+60*60*1000);await UserRepo.update(user._id,{resetToken:token,resetTokenExp:exp});const link=`${baseUrl}/api/recovery/reset?token=${token}&email=${encodeURIComponent(email)}`;await sendResetEmail(email,link);return true}
export async function resetPassword({email,token,newPassword}){const user=await UserRepo.getByEmail(email);if(!user||user.resetToken!==token||!user.resetTokenExp||user.resetTokenExp<new Date())throw new Error('Token inválido o expirado');if(compare(newPassword,user.password))throw new Error('La nueva contraseña no puede ser igual a la anterior');await UserRepo.update(user._id,{password:hash(newPassword),resetToken:null,resetTokenExp:null});return true}
