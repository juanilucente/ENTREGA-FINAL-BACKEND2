import CartRepo from '../repository/CartRepository.js';import ProductRepo from '../repository/ProductRepository.js';import TicketRepo from '../repository/TicketRepository.js';import {v4 as uuidv4} from 'uuid'
export async function addToCart(cartId,productId,qty=1){const cart=await CartRepo.getById(cartId);const existing=cart.products.find(p=>p.product._id.toString()===productId);if(existing)existing.quantity+=qty;else cart.products.push({product:productId,quantity:qty});return await CartRepo.update(cartId,{products:cart.products})}
export async function purchase(cartId,purchaserEmail){const cart=await CartRepo.getById(cartId);let amount=0;const updatedProducts=[];const notProcessed=[];for(const item of cart.products){const prod=await ProductRepo.getById(item.product._id);if(!prod||prod.stock<item.quantity){notProcessed.push({product:item.product._id,requested:item.quantity});continue}await ProductRepo.update(prod._id,{stock:prod.stock-item.quantity});amount+=prod.price*item.quantity;updatedProducts.push(item)}if(amount>0){await TicketRepo.create({code:uuidv4(),amount,purchaser:purchaserEmail})}const remaining=cart.products.filter(it=>!updatedProducts.find(u=>u.product._id.toString()==it.product._id.toString()));await CartRepo.update(cartId,{products:remaining});return {amount,notProcessed}}
